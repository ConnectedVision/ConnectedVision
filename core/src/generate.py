import argparse
import distutils.spawn
import glob
import os
import platform
import re
import subprocess



parser = argparse.ArgumentParser(description="Global code generator script.")
parser.add_argument("-r", "--rootDir", help="destination directory of the generated files", type=str, required=False, default="")
parser.add_argument("-g", "--generatorSettings", help="generator settings JSON file path", type=str, required=False, default="")
parser.add_argument("-c", "--schemaDir", help="path to JSON schemata", type=str, required=False, default="")
parser.add_argument("-v", "--verbose", help="verbose output", required=False, action="store_true")
args = parser.parse_args()

# check if node (Node.js executable) is found on the system path
if not distutils.spawn.find_executable("node"):
	scriptFile = "activate." + ("bat" if platform.system() == "Windows" else "sh")
	
	raise Exception("\n\nFailed to locate node (Node.js executable).\nPlease execute the Node.js environment activation script" + (" by calling \"source ./" + scriptFile + "\"" if platform.system() == "Linux" else "") + ".\nThe " + scriptFile + " file is generated by Conan when calling the following command:\nconan install Node.js/x.y.z@covi/channelname -b outdated -g virtualenv")

# check the ConnectedVision environment variable
if "ConnectedVision" not in os.environ:
	raise Exception("\n\nthe environment variable \"ConnectedVision\" is not defined")

connectedVisionDir = os.path.normpath(os.environ["ConnectedVision"])

rootDir = os.path.dirname(os.path.realpath(__file__))

if args.rootDir:
	rootDir = os.path.normpath(args.rootDir)

if not os.path.isdir(rootDir) or not os.path.exists(rootDir):
	raise Exception("\n\nthe specified destination directory is not a valid directory path or does not exist: \"" + rootDir + "\"")

generatorSettings = "generatorSettings.json"

if args.generatorSettings:
	generatorSettings = os.path.normpath(args.generatorSettings)

if not os.path.isfile(generatorSettings) or not os.path.exists(generatorSettings):
	raise Exception("the specified generator settings file is not a file or does not exist: \"" + generatorSettings + "\"")	
	
schemaDir = os.path.join(os.pardir, "def")

if args.schemaDir:
	schemaDir = os.path.normpath(args.schemaDir)

toolsDir = os.path.normpath(os.path.join(connectedVisionDir, "tools"))

verboseSuffix = ""

if args.verbose:
	verboseSuffix = "-v"

for file in glob.iglob(os.path.join(schemaDir, "*.schema")):
	createItemForSchema = os.path.join(toolsDir, "CodeFromTemplate", "CreateItemForSchema.js")
	print("")
	print("CreateItemForSchema.js")
	print("-----------------")
	returnCode = subprocess.call(["node", createItemForSchema, rootDir, connectedVisionDir, os.path.join(schemaDir, file), generatorSettings, verboseSuffix])
	print("")

	if returnCode > 0:
		Exception("\n\nthe return code (" + str(returnCode) + ") of the command is greater than zero")

	codeFromTemplatePath = os.path.join(toolsDir, "CodeFromTemplate", "CodeFromTemplate.js")
	globalJson = os.path.join(rootDir, "global.json")
	artefactsJson = os.path.join(rootDir, "artefacts.json")

	print("")
	print("CodeFromTemplate.js - DATA items")
	print("--------------------------------")
	returnCode = subprocess.call(["node", codeFromTemplatePath, globalJson, os.path.join(rootDir, "items.json"), verboseSuffix])
	print("")

	if int(returnCode) > 0:
		Exception("\n\nthe return code (" + str(returnCode) + ") of the command is greater than zero")


	if not args.verbose:
		print("clean up")
		print("--------")
		os.unlink(os.path.join(rootDir, "global.json"))
		os.unlink(os.path.join(rootDir, "items.json"))
		os.unlink(os.path.join(rootDir, "artefacts.json"))